import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ ‚Äî –ó–ê–ü–û–õ–ù–ò–¢–ï –°–ê–ú–ò
TEXT_MIXING = "üìå –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–µ–¥–µ–Ω–∏–∏.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n- –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Å–≤–µ–¥–µ–Ω–∏–µ\n- –°—Ä–æ–∫–∏\n- –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç\n- –¶–µ–Ω–∞\n\n–î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç."

TEXT_MASTERING = "üìå –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥–µ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n- –ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥\n- –§–æ—Ä–º–∞—Ç—ã\n- –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç—Ä–µ–∫\n- –°—Ä–æ–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å\n\n–î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç."

TEXT_BOTH = "üìå –ü–æ–ª–Ω—ã–π –∞—É–¥–∏–æ-–ø–∞–∫–µ—Ç: —Å–≤–µ–¥–µ–Ω–∏–µ + –º–∞—Å—Ç–µ—Ä–∏–Ω–≥.\n\n- –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n- –°–∫–∏–¥–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –ø–∞–∫–µ—Ç–∞\n- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å\n\n–î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç."

TEXT_INFO = "üìå –û–±–æ –º–Ω–µ:\n\n–Ø ‚Äî –∞—É–¥–∏–æ–∏–Ω–∂–µ–Ω–µ—Ä —Å 5+ –ª–µ—Ç –æ–ø—ã—Ç–∞.\n–†–∞–±–æ—Ç–∞—é –≤ Pro Tools, Logic, Ableton.\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–µ, —Ö–∏–ø-—Ö–æ–ø–µ, –ø–æ–ø.\n\nüì© –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n‚≠ê –û—Ç–∑—ã–≤—ã: @reviews_channel"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ù–∞–∑–∞–¥"
def get_back_button():
    return [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("1. –°–≤–µ–¥–µ–Ω–∏–µ", callback_data="mixing")],
        [InlineKeyboardButton("2. –ú–∞—Å—Ç–µ—Ä–∏–Ω–≥", callback_data="mastering")],
        [InlineKeyboardButton("3. –°–≤–µ–¥–µ–Ω–∏–µ –∏ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥", callback_data="both")],
        [InlineKeyboardButton("4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "back":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("1. –°–≤–µ–¥–µ–Ω–∏–µ", callback_data="mixing")],
            [InlineKeyboardButton("2. –ú–∞—Å—Ç–µ—Ä–∏–Ω–≥", callback_data="mastering")],
            [InlineKeyboardButton("3. –°–≤–µ–¥–µ–Ω–∏–µ –∏ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥", callback_data="both")],
            [InlineKeyboardButton("4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)
        return

    # –ö–Ω–æ–ø–∫–∏ —Å "–ù–∞–∑–∞–¥" –∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
    action_keyboard = [
        [InlineKeyboardButton("üì© –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"apply_{data}")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    reply_markup = InlineKeyboardMarkup(action_keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
    if data == "mixing":
        await query.edit_message_text(text=TEXT_MIXING, reply_markup=reply_markup, parse_mode='HTML')
    elif data == "mastering":
        await query.edit_message_text(text=TEXT_MASTERING, reply_markup=reply_markup, parse_mode='HTML')
    elif data == "both":
        await query.edit_message_text(text=TEXT_BOTH, reply_markup=reply_markup, parse_mode='HTML')
    elif data == "info":
        await query.edit_message_text(text=TEXT_INFO, reply_markup=reply_markup, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–∫–∏
async def apply_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    data = query.data.replace("apply_", "")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "mixing"
    user = query.from_user
    username = f"@{user.username}" if user.username else f"ID: {user.id}"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
    service_names = {
        "mixing": "—Å–≤–µ–¥–µ–Ω–∏–µ",
        "mastering": "–º–∞—Å—Ç–µ—Ä–∏–Ω–≥",
        "both": "—Å–≤–µ–¥–µ–Ω–∏–µ –∏ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥",
        "info": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    }
    service = service_names.get(data, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é —É—Å–ª—É–≥—É")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì© –í–∞–º –ø—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ <b>{service}</b> –æ—Ç {username}",
            parse_mode='HTML'
        )
        await query.edit_message_text(
            text="‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup(get_back_button())
        )
    except Exception as e:
        await query.edit_message_text(
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é.",
            reply_markup=InlineKeyboardMarkup(get_back_button())
        )
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(apply_handler, pattern=r"^apply_"))
    application.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    application.run_polling()

if __name__ == "__main__":
    main()
